#!/usr/bin/env bash
# 
# Script to kickstart raspberry pi-s client specific configurations

E_NOARGS=85
if [ -z "$1" ]; then
  echo "Usage: $(basename "$0") [installationtype]"
  exit "$E_NOARGS"
fi

set -e  # stop on errors
set -u  # stop on unset variables
set -o pipefail  # stop on pipe failures
# set -o errexit
# set -o nounset
# set -o xtrace

echo
echo "------------------------------------------------------"
echo "Beginning Post-install generic script"
echo "------------------------------------------------------"
echo

generic_pwd="chocotemp"
current_user=${USER}

case "$1" in
  "pihole"|"cobra"|"hifipi"|"retrodock"|"devpi")
    echo "Starting a $1 installation"
    ;;
  *)
    echo "You have provided a wrong installation type: $1"
    exit 1
    ;;
esac

echo "------------------------------------------------------"
echo "Adding the user to the sudoers"
echo "------------------------------------------------------"
# adding the user to the sudoers
# shellcheck disable=SC2016
script='echo "$1 ALL=(ALL:ALL) NOPASSWD: ALL" | tee -a /etc/xsudoers'
echo ${generic_pwd} | sudo -S /bin/sh -c "$script" -- "$current_user"

echo "------------------------------------------------------"
echo "Updating and upgrading to start"
echo "------------------------------------------------------"
# update apt packages
sudo apt --yes update && sudo apt --yes upgrade -y

# echo "Disabling bluetooth"
# echo
# disable bluetooth daemon - not necessary in current setup
# sudo systemctl disable hciuart.service
# sudo systemctl disable bluealsa.service
# sudo systemctl disable bluetooth.service

echo "------------------------------------------------------"
echo "Disable root login on sshd and on different layers"
echo "------------------------------------------------------"
# disable root login on sshd and on different layers
sudo sed -i "s/.*#PermitRootLogin.*/PermitRootLogin no/g" /etc/ssh/sshd_config
sudo passwd --lock root
sudo passwd -d root

echo "------------------------------------------------------"
echo "Chaging user password to random value"
echo "------------------------------------------------------"
# change user password
rndpwd=$(openssl rand -base64 45)
echo "${rndpwd}" > /dev/shm/pwd
chmod 600 /dev/shm/pwd
echo -e "${generic_pwd}\n${rndpwd}\n${rndpwd}" | passwd

echo "------------------------------------------------------"
echo "Creating SSH key pair"
echo "------------------------------------------------------"
# creating the ssh key
mkdir ~/.ssh
chmod 700 ~/.ssh
rndpwd=$(openssl rand -base64 45)
echo "${rndpwd}" > /dev/shm/ssh_pwd
chmod 600 /dev/shm/ssh_pwd
#ssh-keygen -o -a 250 -t ed25519 -f ~/.ssh/id_ed25519 -C "${USER}@${HOSTNAME}" -q -N ""
ssh-keygen -o -a 250 -t ed25519 -f ~/.ssh/id_ed25519 -C "${USER}@${HOSTNAME}" -q -N "${rndpwd}"

echo "------------------------------------------------------"
echo "Copying authorized_keys"
echo "------------------------------------------------------"
# importing authorized_keys from gist - Reassess if this is a good idea
auth_keys="https://gist.githubusercontent.com/ignaciojimenez/ad9d7f85927a18826ad105241ad968f4/raw/authorized_keys"
curl ${auth_keys} -o ~/.ssh/authorized_keys --create-dirs
chmod 700 ~/.ssh
chmod 644 ~/.ssh/authorized_keys

echo "------------------------------------------------------"
echo "Created logdir in userspace"
echo "------------------------------------------------------"
mkdir ~/.log

echo "------------------------------------------------------"
echo "Moving update script to ${HOME} and it to crontab"
echo "------------------------------------------------------"
# downloading update.sh script
cp common/update ~
sudo chmod +x ~/update
# install crontab to create system autoupdates
echo "$(echo "30 5 * * 1,2,3,4 bash /home/${USER}/update >> /home/${USER}/.log/update.log 2>&1" ; crontab -u "${USER}" -l)" | crontab -u "${USER}" -

echo "------------------------------------------------------"
echo "Restricting bashrc permissions"
echo "------------------------------------------------------"
# changing access to bashrc
chmod 600 ~/.bashrc

echo "Adding git identity"
git config --global user.email "i.jimenezpi@gmail.com"
git config --global user.name "Ignacio Jimenez Pi"

echo "------------------------------------------------------"
echo "Now executing specific script for system: $1"
echo "------------------------------------------------------"
# executing custom script for the type of installation desired
cd "$1"
# shellcheck source=/dev/null
source "$1"
cd ..

echo "------------------------------------------------------"
echo "Custom script finished"
echo "Cleaning apt cache"
echo "------------------------------------------------------"
# upgrade and clean installations
sudo apt --yes full-upgrade
sudo apt autoremove
sudo apt-get autoclean
sudo apt-get clean

echo "------------------------------------------------------"
echo "Installation finished. Please store the password files securely and reboot manually..."
echo "------------------------------------------------------"

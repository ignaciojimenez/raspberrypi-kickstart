#!/bin/bash
# 
# Script to kickstart pihole specific configurations

echo
echo "------------------------------------------------------"
echo "Beginning Pihole script"
echo "------------------------------------------------------"
echo
# shellcheck disable=SC2034
# pihole_original_ip="192.168.2.200"
# shellcheck disable=SC2034
# pihole_original_user="choco"

echo "------------------------------------------------------"
echo "Disabling the screen of the pi on boot via init.d script"
echo "------------------------------------------------------"
# disabling the screen of the pi on boot via init.d script
sudo cp ../common/tvoff /etc/init.d/tvoff
sudo chmod 755 /etc/init.d/tvoff
sudo update-rc.d tvoff defaults


# echo "------------------------------------------------------"
# echo "Copying original pihole settings from original and running pihole"
# echo "------------------------------------------------------"
# # copying the ssh public key
# ssh-copy-id ${pihole_original_user}@${pihole_original_ip}
# # copying all the pihole configs to tmp folders in ${HOME}
# scp -r ${pihole_original_user}@${pihole_original_ip}:/etc/dnsmasq.d/ ~/
# mkdir ~/pihole
# scp ${pihole_original_user}@${pihole_original_ip}:/etc/pihole/setupVars.conf ~/pihole
# scp ${pihole_original_user}@${pihole_original_ip}:/etc/pihole/adlists.list ~/pihole
# scp ${pihole_original_user}@${pihole_original_ip}:/etc/pihole/whitelist.txt ~/pihole
# scp ${pihole_original_user}@${pihole_original_ip}:/etc/pihole/blacklist.txt ~/pihole
# scp ${pihole_original_user}@${pihole_original_ip}:/etc/pihole/wildcardblocking.txt ~/pihole
#
# # Modifying the IP from the new pihole
# NEW_IP=$(hostname -I | awk '{print $1}')
# sudo sed -i "s/IPV4_ADDRESS=.*/IPV4_ADDRESS=${NEW_IP}\/24/" ~/pihole/setupVars.conf
# sudo sed -i "s/DHCP_ROUTER=.*/DHCP_ROUTER=${NEW_IP}/" ~/pihole/setupVars.conf
# sudo sed -i "s/dhcp-option=option:router,.*/dhcp-option=option:router,${NEW_IP}/" ~/dnsmasq.d/02-pihole-dhcp.conf
#
# #moving configuration files to the final folders
# sudo mv ~/pihole/ /etc/
# sudo mv ~/dnsmasq.d/ /etc/
# #sudo chown pihole:pihole /etc/pihole/
# sudo chown -R root:root /etc/dnsmasq.d/


echo "------------------------------------------------------"
echo "Installing pihole"
echo "------------------------------------------------------"
# installing pihole required package
sudo apt install bc
# install pihole
curl -L https://install.pi-hole.net | sudo bash /dev/stdin --unattended

# Checking that the installation was completed
if ! command -v pihole &> /dev/null
then
  # if not, modify /etc/resolv.conf and retry
  echo "------------------------------------------------------"
  echo "Retrying pihole installation in 10 seconds, please wait..."
  sleep 10
  echo "Now proceeding with pihole installation retry"
  echo "------------------------------------------------------"
  echo "nameserver 1.1.1.1" | sudo tee -a /etc/resolv.conf
  curl -L https://install.pi-hole.net | sudo bash /dev/stdin --unattended
fi

echo "------------------------------------------------------"
echo "Installing unify Controller"
echo "------------------------------------------------------"
# speeding up randomness
sudo apt-get install haveged -y
# install java8 (cluncky dependency)
sudo apt-get install openjdk-8-jre-headless -y
# adding the repo and gpg repo keys
echo 'deb http://www.ui.com/downloads/unifi/debian stable ubiquiti' | sudo tee /etc/apt/sources.list.d/100-ubnt-unifi.list
sudo wget -O /etc/apt/trusted.gpg.d/unifi-repo.gpg https://dl.ubnt.com/unifi/unifi-repo.gpg
# install this now
sudo apt-get update; sudo apt-get install unifi -y
# clean mongodb
sudo systemctl stop mongodb
sudo systemctl disable mongodb

# Controller portal https://${IP}:8443

echo "------------------------------------------------------"
echo "Adding pihole update to update script"
echo "------------------------------------------------------"
sed -i '7ipihole -up' ~/.scripts/update

echo "------------------------------------------------------"
echo "adding dns_change to update dns configs in case the vpn is down"
echo "------------------------------------------------------"
sudo apt-get install jq -y
cp dns_checkandchange ~/.scripts
echo "$(echo "*/15 * * * * /bin/bash /home/${USER}/.scripts/dns_checkandchange >> /home/${USER}/.log/dns 2>&1" ; crontab -u "${USER}" -l)" | crontab -u "${USER}" -

echo "------------------------------------------------------"
echo "adding webs to test to crontab"
echo "------------------------------------------------------"
url="https://localhost:8443/manage/account/login?redirect=%2Fmanage%2Faccount%2F"
text="unifi-network-app-container"
echo "$(echo "@hourly /bin/bash /home/${USER}/.scripts/testweb \$(cat /home/${USER}/.scripts/alert_token) ${url} ${text} >> /home/${USER}/.log/web_$(echo "$url" | awk -F/ '{print $3}') 2>&1" ; crontab -u "${USER}" -l)" | crontab -u "${USER}" -

url="https://www.alisios.es"
text="Payment Methods:"
echo "$(echo "@hourly /bin/bash /home/${USER}/.scripts/testweb \$(cat /home/${USER}/.scripts/alert_token) ${url} ${text} >> /home/${USER}/.log/web_$(echo "$url" | awk -F/ '{print $3}') 2>&1" ; crontab -u "${USER}" -l)" | crontab -u "${USER}" -

url="https://www.recordsdelmundo.es"
text="esconder"
echo "$(echo "@hourly /bin/bash /home/${USER}/.scripts/testweb \$(cat /home/${USER}/.scripts/alert_token) ${url} ${text} >> /home/${USER}/.log/web_$(echo "$url" | awk -F/ '{print $3}') 2>&1" ; crontab -u "${USER}" -l)" | crontab -u "${USER}" -
